#include<glad/glad.h>
#include<GLFW/glfw3.h>
#include<iostream>

const GLuint SCR_WIDTH = 800;
const GLuint SCR_HEIGHT = 600;

const char *vertexShaderSource ="#version 330 core\n"
    "layout (location = 0) in vec3 aPos;\n"
    "layout (location = 1) in vec3 aColor;\n"
    "out vec3 ourColor;\n"
    "void main()\n"
    "{\n"
    "   gl_Position = vec4(aPos, 1.0);\n"
    "   ourColor = aColor;\n"
    "}\0";

const char *fragmentShaderSource = "#version 330 core\n"
    "out vec4 FragColor;\n"
    "in vec3 ourColor;\n"
    "void main()\n"
    "{\n"
    "   FragColor = vec4(ourColor, 1.0f);\n"
    "}\n\0";


int main()
{
	// Initialize GLFW
	glfwInit();
	// Tell OpenGL we are using the version 3.3
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	// Tell OpenGL we will be using only modern functions
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	// Create a GLFW window object
	GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "Shaders Interpolation", NULL, NULL);
	//Check if the window was properly created
	if(window == NULL)
	{
		std::cout << "Failed to create a GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}

	//Making the OpenGL context of the specified window current
	glfwMakeContextCurrent(window);
	
	// Initialize GLAD in order to properly use OpenGL functions
	if(!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
	
		std::cout << "Failed to initialize GLAD" << std::endl;
		glfwTerminate();
		return -1;
	}

	// Create our graphical pipeline
	// Create the vertex shader -> programmable Shader stage that handles the processing of individual vertices
	GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
	// Sets the source code in shader to the source code in the array of strings specified
	glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
	// Compiles the shader
	glCompileShader(vertexShader);
	// Check for compilation errors
	GLint success;
	GLchar infoLog[512];
	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
	if(!success)
	{
		glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
		glfwTerminate();
		return -1;
	
	}

	// Create the fragment shader -> stage that will process the Fragment generated by rasterization
	// into a set of colors and a single depth value
	GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	// Sets the source code in shader to the source code in the array of string specified
	glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
	// Compile the shader
	glCompileShader(fragmentShader);
	// Check for compilation errors
	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
	if(!success)
	{
		glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
		glfwTerminate();
		return -1;
	}

	// Create the shader program to which shaders will be attached
	GLuint shaderProgram = glCreateProgram();
	// Attach the vertex shader to the program
	glAttachShader(shaderProgram, vertexShader);
	// Attach the fragment shader to the program
	glAttachShader(shaderProgram, fragmentShader);
	// Link the program
	glLinkProgram(shaderProgram);
	// Check if the program was successfully linked
	glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
	if(!success)
	{
		glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
		glfwTerminate();
		return -1;
	}

	// After attaching the shaders to the program we can securely delete them
	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);

	// Setting the vertex data, this time with the colors we will be using
	float vertices[] = {
		// positions         // colors
		 0.5f, -0.5f, 0.0f,  0.5f, 0.0f, 0.0f,  // bottom right
		-0.5f, -0.5f, 0.0f,  0.0f, 0.8f, 0.0f,  // bottom left
		 0.0f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f   // top 

	};

	// Creation of the vertex buffer object and the vertex array object
	GLuint VBO, VAO;
	
	// Generate the VBO and the VAO
	glGenVertexArrays(1, &VAO);
	glGenBuffers(1, &VBO);

	// Bind the VAO to make it the current one
	glBindVertexArray(VAO);
	
	// Bind the VBO to make it the current one
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	// Configure the VBO
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	// Configure the VAO
	// Position attribute -> now the array have 6 values (x, y, z) and the colors (rgb)
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (void*)0);
	// In the source code the location was set to 0
	glEnableVertexAttribArray(0);

	// Color attribute -> we neeed an offset of 3 values to reach the colors inside the array
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (void*)(3 * sizeof(GLfloat)));
	// In the source code the location was set to 1
	glEnableVertexAttribArray(1);


	glUseProgram(shaderProgram);
	while(!glfwWindowShouldClose(window))
	{
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		glBindVertexArray(VAO);
		glDrawArrays(GL_TRIANGLES, 0, 3);

		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	glDeleteBuffers(1, &VBO);
	glDeleteVertexArrays(1, &VAO);
	glDeleteProgram(shaderProgram);

	// Destroys the specified window object
	glfwDestroyWindow(window);
	glfwTerminate();
	return 0;
}