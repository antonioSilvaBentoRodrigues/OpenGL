#include<glad/glad.h>
#include<GLFW/glfw3.h>
#include<iostream>

const GLchar *vertexShaderSource = "#version 330 core\n"
	"layout (location = 0 ) in vec3 aPos;\n"
	"void main()\n"
	"{\n"
		"gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
	"}\0";

const GLchar *fragmentShaderSource = "#version 330 core\n"
	"out vec4 FragColor;\n"
	"void main()\n"
	"{\n"
		"FragColor = vec4(1.0f, 0.5f, 0.5f, 2.0f);\n"
	"}\n\0";

const GLuint SCR_WIDTH = 800;
const GLuint SCR_HEIGHT = 600;

int main()
{
	// Initialize GLFW 
	glfwInit();
	// Configure GLFW -> Version 3.3
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	// Tell OpenGL we will be using only modern functions
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	// Create a GLFW window object
	GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "How to Render a Primitive", NULL, NULL);
	//Check if the window was properly created
	if (window == NULL)
	{
		std::cout << "Failed to create a GLFW window" << std::endl;

		// Free allocated resources, destroys any remaining window or cursors
		glfwTerminate();
		return -1;
	}

	// Making the OpenGL context of the specified window current
	glfwMakeContextCurrent(window);

	// Initialize GLAD in order to properly use the OpenGL functions without failing or crashing
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{

		std::cout << "Failed to initialize GLAD" << std::endl;
		glfwTerminate();
		return -1;
	}

	// Create our grapichal pipeline
	// Create the vertex shader -> programmable Shader stage that handles the processing of individual vertices
	GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
	// Sets the source code in shader to the source code in the array of strings specified
	glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
	// Compiles the shader
	glCompileShader(vertexShader);
	//Checking if the compilation was successfully done
	GLint success;
	GLchar infoLog[512];
	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
	if(!success)
	{
		glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
		glfwTerminate();
		return -1;
	}

	// Create the fragment shader -> stage tha will process a Fragment generated by the Rasterization 
	//into a set of colors and a single depth value
	GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	// Sets the source code in shader to the source code in the array of strings specified
	glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
	// Compiles the shader
	glCompileShader(fragmentShader);
	//Checking if the compilation was successfully done
	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
	if(!success)
	{
		glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
		glfwTerminate();
		return -1;
	}

	// Create the program object to wich shaders will be attached
	GLuint shaderProgram = glCreateProgram();
	// Attach the shaders to the program
	glAttachShader(shaderProgram, vertexShader);
	glAttachShader(shaderProgram, fragmentShader);
	// Link the program
	glLinkProgram(shaderProgram);
	// Checking if the program was sucessfully linked
	glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
	if(!success)
	{
		glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
		glfwTerminate();	
		return -1;
	}

	// After attaching the shaders to the program you can securely delete them
	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);


	// Setting the vertex data
	float vertices[] = {
		-0.5f, -0.5f, 0.0f,
		 0.5f, -0.5f, 0.0f,
		 0.0f,  0.5f, 0.0f
	};

	// Creation of the Vertex Buffer Object and the Vertex Array Object
	GLuint VBO, VAO;
	// Generate the VBO
	glGenBuffers(1, &VBO);
	// Generate the VAO
	glGenVertexArrays(1, &VAO);
	
	// Bind the VAO making it the current one
	glBindVertexArray(VAO);

	//	Bind the VBO making it the current one
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	// Configure the VBO
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	// Configure the VAO
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (void*)0);
	glEnableVertexAttribArray(0);

	// Unbind the VAO
	glBindVertexArray(0);


	//Create a loop that only stops when the window is closed
	while(!glfwWindowShouldClose(window))
	{
		// Sets the background color to a light blue
		glClearColor(0.2f, 0.8f, 1.0f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		//Use the shader program to render
		glUseProgram(shaderProgram);
		// Bind the VAO to use its vertex attribute configurations
		glBindVertexArray(VAO);
		// Draw the vertices as a triangle
		glDrawArrays(GL_TRIANGLES, 0, 3);


		//Swaps the front and back buffers of the specified window
		glfwSwapBuffers(window);
		// Processes all pending events
		glfwPollEvents();

	}

	glDeleteBuffers(1, &VBO);
	glDeleteVertexArrays(1, &VAO);
	glDeleteProgram(shaderProgram);

	// Destroys the specified window object
	glfwDestroyWindow(window);
	glfwTerminate();
	return 0;
}